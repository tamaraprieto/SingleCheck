#!/bin/bash
#SBATCH -N 1
#SBATCH -n 1
#SBATCH --mail-user tamara.prieto.fernandez@gmail.com
#SBATCH --mail-type FAIL
#SBATCH --cpus-per-task 3
#SBATCH -t 10:00:00
#SBATCH --mem 60G

############################################################################
#                        USAGE                                             #
############################################################################
	usage="
	$(basename "$0") [options] <in.bam>
	
	options:
	    -h  show this help text
	    -w  set the window size for gini index, coefficient of variation and MAD (default: 10000)
            -a  set alpha for autocorrelation (default: 1000)
            -t  number of threads
            -f  flag of the reads to filter out
            -q  mapping quality of the reads to analize 
	    -d  regular expresion  matching the lines starting by chromosome names which are diploid (default: \"^[1-9|X]\")
        the bam file must be indexed
	"

	WSIZE=10000
	ALPHA=1000
	#SUFFIX="X.filtered"
	FLAGTOFILTEROUT=772
	THREADS=3
	MAPQUAL=20
        DIPLOID_REGEX="^[1-9|X]"

	while getopts ':hw:a:f:t:q::' option; do
	  case "$option" in
	    h) echo "$usage"
	       exit
	       ;;
	    w) WSIZE=$OPTARG
               isanum=^[0-9]+$                    
               if [[ ! $WSIZE =~ $isanum ]] || [[ $WSIZE -eq 0 ]]; then   
               printf "\nError: -w must be a positive whole number higher than 0\n"
	       echo "$usage" >&2 
               exit 1
	       fi
	       ;;
            a) ALPHA=$OPTARG
               isanum=^[0-9]+$
               if [[ ! $ALPHA =~ $isanum ]] || [[ $ALPHA -eq 0 ]]; then
               printf "\nError: -a must be a positive whole number higher than 0\n"
               echo "$usage" >&2
               exit 1
               fi
               ;;
            f) FLAGTOFILTEROUT=$OPTARG
               ;;
            t) THREADS=$OPTARG
               ;;
            q) MAPQUAL=$OPTARG
               isanum=^[0-9]+$
               if [[ ! $MAPQUAL =~ $isanum ]]; then
               printf "\nError: -q must be a positive whole number\n"
               echo "$usage" >&2
               exit 1
               fi
               ;;
            d) DIPLOID_REGEX=$OPTARG
               ;;
	    :) printf "missing argument for -%s\n" "$OPTARG" >&2
	       echo "$usage" >&2
	       exit 1
	       ;;
	   \?) printf "illegal option: -%s\n" "$OPTARG" >&2
	       echo "$usage" >&2
	       exit 1
	       ;;
	  esac
	done
	shift $((OPTIND - 1))


if [ "$#" -ne 1 ]; then
    printf "\nSpecify the name of the BAM file\n" >&2
    echo "$usage" >&2
    exit 1
fi

# mandatory arguments
BAM="$1"
NAME=$(echo $BAM | sed 's/.bam//')
if [ ! -f "$BAM" ]; then
    echo ""
    echo "$BAM does not exists"
    echo ""
    echo "$usage" >&2
    exit 1
fi

if [[ "$BAM" != *.bam ]]
then
    printf "\nThe file extension must be \'.bam\'\n" >&2
    echo "$usage" >&2
    exit 1
fi

############################################################################
#                        SET UP VARIABLES                                  #
############################################################################

if [ -n "$SLURM_JOB_ID" ] && [ "$SLURM_JOB_ID" -eq "$SLURM_JOB_ID" ]
then
    SCRIPT=$(scontrol show job $SLURM_JOBID | awk -F= '/Command=/{print $2}' | awk '{print $1}')
    SCRIPTDIR=$(dirname $SCRIPT)
else
    SCRIPTDIR=$(pwd -P)
fi

printf "\n\tSingleCheck -w %s -a %s -f %s -t %s -q %s %s\n\n" "$WSIZE" "$ALPHA" "$FLAGTOFILTEROUT" "$THREADS" "$MAPQUAL" "$BAM"

############################################################################
#                        LOAD MODULES                                      #
############################################################################
	
	module purge 2> /dev/null
	module load samtools/1.10 2> /dev/null
	module load gcc/6.4.0 R/3.6.3 2> /dev/null
        module load miniconda3/4.8.2 2> /dev/null
        source activate /mnt/netapp1/posadalab/APPS/CommonCondaEnvironments/mosdepth 2> /dev/null

# ///////// CONDA ENVIRONMENTS MISSING, CREATE A SINGLE ONE

############################################################################
#                        CALCULATE COVERAGE BIAS                           #
############################################################################


#if [[ ! -f ${NAME}.${WSIZE}.regions.bed.gz ]]
#then
echo "> Running mosdepth"
        # the number of floats I need for mosdepth depends on the window size
	# wc -c gives an extra character (\n). window size of 100 (3 chars) -> minimum coverage will be 0.01 (2 decs)
        precision=$(echo $WSIZE | wc -c | awk '{print $1-2}')

        # --fast-mode dont look at internal cigar operations or correct mate overlaps (recommended for most use-cases). Avoids the extra calculations of mate pair overlap and cigar operations
        # 772 flag: exclude read unmapped, not primary alignment, read fails platform/vendor quality checks
        MOSDEPTH_PRECISION=${precision} mosdepth \
                -t $THREADS \
                --fast-mode \
		--no-per-base \
                --by $WSIZE \
                --flag $FLAGTOFILTEROUT \
                --mapq $MAPQUAL \
                ${NAME}.${WSIZE} \
                ${NAME}.bam
        # Output .regions.bed.gz contains mean base depth per window
	rm ${NAME}.${WSIZE}.mosdepth* # remove extra files created by mosdepth

#fi
conda deactivate


if [[ ! -f ${NAME}.mpileup ]]
then
# ////// Create all the results in a new folder "name.parameters.date" to avoi problems creating the same file
# ////// Read about mpileup paralelization or do it only in one chromosome (-region)
# ////// I need mpileup for MAD = 1 and for autocorrelation for all alphas
# ///// I could use the .per-base.bed.gz file generated by mosdepth (but it is a nedgraph, so then I would need to merge the bedgraphs with bedtools (and install anyway another software)). And I could not remove positions with N in the reference genome
echo "> Running mpileup"
samtools mpileup \
        --ff $FLAGTOFILTEROUT \
        --no-BAQ \
        --fasta-ref ${RESDIR}/${REF}.fa \
        -aa \
        -q $MAPQUAL \
        ${NAME}.bam | \
	grep "$DIPLOID_REGEX" > \
	${NAME}.mpileup
else
echo "Mpileup already created"
fi


echo "> Calculating gini and cv"
#if [[ ! -f ${NAME}.${WSIZE}.freqs.txt ]]
#then
        # Create a frequency table
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
        grep "$DIPLOID_REGEX" | \
        awk '{print $4}' | \
        sort -n | \
        uniq -c | \
        awk '{print $2"\t"$1}' | sort -n -k1,1 \
        > ${NAME}.${WSIZE}.freqs.txt
#fi
echo $SCRIPTDIR

Rscript ${SCRIPTDIR}/src/GiniIndex.R ${NAME}.${WSIZE}
Rscript ${SCRIPTDIR}/src/CoefficientOfVariation.R ${NAME}.${WSIZE}

echo "> Calculating autocorrelation"
#if [[ ! -f ${NAME}.${ALPHA}.shiftedcov.txt ]]
#then
num=$(awk -v alpha=$ALPHA 'BEGIN{print alpha+1}')
tail -n +${num} ${NAME}.mpileup | \
        paste ${NAME}.mpileup - | \
        awk '{if (NF==12 && $3!="N" && $9!="N" && $1==$7) {print $4"\t"$10} else if (NF==6 && $3!="N"){print $4"\tNA"}}' | \
	sort | uniq -c | \
        awk '{print $2"\t"$3"\t"$1}' \
        > ${NAME}.${ALPHA}.shiftedcov.txt
#fi

Rscript ${SCRIPTDIR}/src/Autocorrelation.R ${NAME}.${ALPHA} $ALPHA


echo "> Calculating MAD"

#if [[ ! -f ${NAME}.${WSIZE}.contiguous.txt ]]
#then
	if [[ "$WSIZE" = 1 ]]
	then
        num=2
        tail -n +${num} ${NAME}.mpileup | \
                paste ${NAME}.mpileup - | \
                awk '{if (NF==12 && $3!="N" && $9!="N" && $1==$7) {print $4"\t"$10} else if (NF==12 && $3!="N" && $9!="N" && $1!=$7){print $4}}' | \
		sort | uniq -c | \
		awk '{if (NF==3) {print $2"\t"$3"\t"$1}else {print $2"\tNA\t"$1}}' \
		 > ${NAME}.${WSIZE}.contiguous.txt

	else
        # Paste values from consecutive windows together
        # I do not want to consider the counts from the last window because is shorter than the other
        # I should not use last comparison neither because it uses last window for one element. I have to only use the first column for calculating the average depth
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
                tail -n +2 | \
                paste  <(zcat ${NAME}.${WSIZE}.regions.bed.gz) - | \
                grep "$DIPLOID_REGEX" | \
                awk '{if (NF==8 && $1==$5) {print $4"\t"$8} else if (NF==8 && $1!=$5){print $4}}' | \
                sort | uniq -c | \
                awk '{if (NF==3) {print $2"\t"$3"\t"$1}else {print $2"\tNA\t"$1}}' \
                > ${NAME}.${WSIZE}.contiguous.txt
	fi
#fi


Rscript ${SCRIPTDIR}/src/MAD.R ${NAME}.${WSIZE}


rm ${NAME}.${ALPHA}.shiftedcov.txt
rm ${NAME}.${WSIZE}.contiguous.txt 
rm ${NAME}.${WSIZE}.freqs.txt
rm ${NAME}.${WSIZE}.regions.bed.gz


# ///// Run metaphyler only if the number of unmapped reads is high?
echo "> METAPHYLER"
samtools view -f 0x4 $BAM | awk '{OFS="\t"; print ">"$1"\n"$10}' > ${NAME}.unmapped.fasta
~/apps/Metaphyler/MetaPhylerSRV0.115/metaphyler.pl 2 ${NAME}.unmapped.fasta ${NAME}

rm ${NAME}.unmapped.fasta
echo "> Finished!"

#
## Get the number of bases which are aligned, soft-clipped or unmapped (only count only primary aligments)
#aligned_soft_bases=$(samtools view -F 256 $WORKDIR/$SAMPLE.dedup.bam | cut -f10 | awk '{total+=length}END{print total}')
## Get the number of bases which are hard-clipped
# /// avoid counting secondary?
#hard_bases=$(samtools view $WORKDIR/$SAMPLE.dedup.bam | cut -f6 | grep H | sed 's/\([0-9]*\)\([A-Z]\)/\1\2\n/g' | grep -v "^$" | grep H | sed 's/H//' | awk '{sum+=$1}END{print sum}')
#if [ -z "$hard_bases" ];then
#	hard_bases=0
#fi
#raw_bases=$(($aligned_soft_bases + $hard_bases))
#genome_length=$(cat ${RESDIR}/${REF}.fai | cut -f2 | awk '{sum+=$1}END{print sum}')
#sequencing_depth=$(bc -l <<< "scale=4; $raw_bases / $genome_length")
#
## 1284: remove not primary alignments, unmapped and duplicates
#
#echo "> CREATE QC FILE"
#rm ${WORKDIR}/${SAMPLE}_QC.txt

# ////// index bam or require to be indexed
#samtools index ${NAME}.bam
#MT=$(samtools idxstats ${BAM} | grep -e "^MT" -e "^chrM" | awk '{print $3}')
#genome=$(cut -f 5 ${WORKDIR}/${SAMPLE}_genome.bed | head -1)
#breadth=$(head -1 ${WORKDIR}/${SAMPLE}_genome.bed | awk '{print (1-$5)*100}')
#class=$(awk '{if ($1 !~ "{") print $0}' ${WORKDIR}/${SAMPLE}.genus.tab | grep -v "^@" | awk '{if ($5 >= 98) print $1}' | tr -s '\n' ',' | sed 's/,$/\n/')
#
#awk -v sample=${SAMPLE} \
#	-v tbases=${raw_bases} \
#	-v seqdepth=${sequencing_depth} \
#	-v talign=${alignments} \
#	-v unique=${unique} -v \
#	unmapped=${unmapped} \
#	-v dup=${duplicate} \
#	-v mt=${MT} \
#	-v bact=${class} \
#	-v breadth=${breadth} \
#	-v genlen=${genome_length} \
#	-v adapt=${adapter} \
#	-v suppl=${chimeric} \
#	-v chimerapairs=${chimerapairs} \
#	-v preseq_inf=${preseq_inference} \
#	-F $'\t' 'BEGIN{OFS=FS; print sample,treads,tbases/1000000000,seqdepth,unique/treads*100,unmapped/treads*100,adapt,dup/(treads-unmapped)*100,chimeric/treads*100,chimerapairs,mt/(treads-unmapped)*100,bact,breadth,breadth*tbases/genlen,preseq_inf}' > ${WORKDIR}/${SAMPLE}_QC.txt

