#!/bin/bash
#SBATCH -N 1
#SBATCH -n 1
#SBATCH --mail-user tamara.prieto.fernandez@gmail.com
#SBATCH --mail-type FAIL
#SBATCH --cpus-per-task 3
#SBATCH -t 10:00:00
#SBATCH --mem 40G

############################################################################
#                        USAGE                                             #
############################################################################
echo "SingleCheck v.0.1"

	usage="$(basename "$0") [-h] [-w n] [-a n] -- program to perform a quality control of single-cell DNA sequencing data
	
	where:
	    -h  show this help text
	    -w  set the window size (default: 10000)
            -a  set alpha for calculating the autocorrelation (default: 1000)"

	WSIZE=1
	ALPHA=1
	SUFFIX="X.filtered"

	while getopts ':hwa:' option; do
	  case "$option" in
	    h) echo "$usage"
	       exit
	       ;;
	    w) WSIZE=$OPTARG
	       ;;
            a) ALPHA=$OPTARG
               ;;
	    :) printf "missing argument for -%s\n" "$OPTARG" >&2
	       echo "$usage" >&2
	       exit 1
	       ;;
	   \?) printf "illegal option: -%s\n" "$OPTARG" >&2
	       echo "$usage" >&2
	       exit 1
	       ;;
	  esac
	done
	shift $((OPTIND - 1))

############################################################################
#                        SET UP VARIABLES                                  #
############################################################################


source ReadConfig.sh $1
SCRIPTDIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
SAMPLE=$(sed "${SLURM_ARRAY_TASK_ID}q;d" ${ORIDIR}/${SAMPLELIST})

# /////// DEPTH WILL BE USED ONLY FOR THE PAPER, REMOVE FOR THE SOFTWARE
DEPTH=$2

NAME=${WORKDIR}/${SAMPLE}.${DEPTH}${SUFFIX}

# ////// ADD THESE VARIABLES TO USAGE
FLAGTOFILTEROUT=772
THREADS=3
MAPQUAL=20

echo "Single cell being analyzed: "$NAME

############################################################################
#                        LOAD MODULES                                      #
############################################################################
	
	module purge 2> /dev/null
	module load samtools/1.10 2> /dev/null
	module load gcc/6.4.0 R/3.6.3 2> /dev/null
        module load miniconda3/4.8.2 2> /dev/null
        source activate /mnt/netapp1/posadalab/APPS/CommonCondaEnvironments/mosdepth 2> /dev/null

# ///////// CONDA ENVIRONMENTS MISSING, CREATE A SINGLE ONE

############################################################################
#                        RESTRICT THE ANALYSIS TO DIPLOID REGIONS          #
############################################################################


        if [ "$GENDER" = "XX" ]
        then
                pattern_match="^[1-9|X]"
	elif [ "$GENDER" = "XY" ]
	then
		pattern_match="^[1-9]"
        else
                pattern_match="^.*"
        fi



############################################################################
#                        CALCULATE COVERAGE BIAS                           #
############################################################################


if [[ ! -f ${NAME}.${WSIZE}.regions.bed.gz ]]
then
echo "> Running mosdepth"
        # the number of floats I need for mosdepth depends on the window size
	# wc -c gives an extra character (\n). window size of 100 (3 chars) -> minimum coverage will be 0.01 (2 decs)
        precision=$(echo $WSIZE | wc -c | awk '{print $1-2}')

        # --fast-mode dont look at internal cigar operations or correct mate overlaps (recommended for most use-cases). Avoids the extra calculations of mate pair overlap and cigar operations
        # 772 flag: exclude read unmapped, not primary alignment, read fails platform/vendor quality checks
        MOSDEPTH_PRECISION=${precision} mosdepth \
                -t $THREADS \
                --fast-mode \
		--no-per-base \
                --by $WSIZE \
                --flag $FLAGTOFILTEROUT \
                --mapq $MAPQUAL \
                ${NAME}.${WSIZE} \
                ${NAME}.bam
        # Output .regions.bed.gz contains mean base depth per window
	rm ${NAME}.${WSIZE}.mosdepth* # remove extra files created by mosdepth

	conda deactivate
fi


echo "> Running mpileup"
#if [[ ! -f ${NAME}.mpileup ]]
#then
# ////// Read about mpileup paralelization or do it only in one chromosome (-region)
# ////// I need mpileup for MAD = 1 and for autocorrelation for all alphas
# ///// I could use the .per-base.bed.gz file generated by mosdepth (but it is a nedgraph, so then I would need to merge the bedgraphs with bedtools (and install anyway another software)). And I could not remove positions with N in the reference genome
samtools mpileup \
        --ff $FLAGTOFILTEROUT \
        --no-BAQ \
        --fasta-ref ${RESDIR}/${REF}.fa \
        -aa \
        -q $MAPQUAL \
        ${NAME}.bam | \
	grep "$pattern_match" > \
	${NAME}.mpileup
#fi


echo "> Calculating gini and cv"

if [[ ! -f ${NAME}.${WSIZE}.freqs.txt ]]
then
        # Create a frequency table
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
        grep "$pattern_match" | \
        awk '{print $4}' | \
        sort -n | \
        uniq -c | \
        awk '{print $2"\t"$1}' | sort -n -k1,1 \
        > ${NAME}.${WSIZE}.freqs.txt
fi

Rscript /mnt/netapp2/posadalab2/uvibetpf/SCCoverageUniformity/scripts/src/GiniIndex.R ${NAME}.${WSIZE}
Rscript /mnt/netapp2/posadalab2/uvibetpf/SCCoverageUniformity/scripts/src/CoefficientOfVariation.R ${NAME}.${WSIZE}

echo "> Calculating autocorrelation"

#if [[ ! -f ${NAME}.${ALPHA}.shiftedcov.txt ]]
#then
num=$(awk -v alpha=$ALPHA 'BEGIN{print alpha+1}')
tail -n +${num} ${NAME}.mpileup | \
        paste ${NAME}.mpileup - | \
        awk '{if (NF==12 && $3!="N" && $9!="N" && $1==$7) {print $4"\t"$10} else if (NF==6 && $3!="N"){print $4"\t"NA}}' | \
	sort | uniq -c | \
        awk '{print $2"\t"$3"\"$1}' \
        > ${NAME}.${ALPHA}.shiftedcov.txt
#fi

Rscript /mnt/netapp2/posadalab2/uvibetpf/SCCoverageUniformity/scripts/src/Autocorrelation.R ${NAME}.${ALPHA} $ALPHA

#module purge
#module load miniconda2/4.5.11
#source activate /mnt/netapp2/Store_uni/home/uvi/be/tpf/conda/python3
#python /mnt/netapp2/posadalab2/uvibetpf/SCCoverageUniformity/scripts/src/CorrelationMagnitude.py ${NAME}.${ALPHA}
#source deactivate
##rm ${NAME}.${ALPHA}.shiftedcov.txt


echo "> Calculating MAD"

#if [[ ! -f ${NAME}.${WSIZE}.contiguous.txt ]]
#then
	if [[ "$WSIZE" = 1 ]]
	then
        num=2
        tail -n +${num} ${NAME}.mpileup | \
                paste ${NAME}.mpileup - | \
                awk '{if (NF==12 && $3!="N" && $9!="N" && $1==$7) {print $4"\t"$10} else if (NF==12 && $3!="N" && $9!="N" && $1!=$7){print $4}}' | \
		sort | uniq -c | \
		awk '{if (NF==3) {print $2"\t"$3"\t"$1}else {print $2"\tNA\t"$1}}' \
		 > ${NAME}.${WSIZE}.contiguous.txt

	else
        # Paste values from consecutive windows together
        # I do not want to consider the counts from the last window because is shorter than the other
        # I should not use last comparison neither because it uses last window for one element. I have to only use the first column for calculating the average depth
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
                tail -n +2 | \
                paste  <(zcat ${NAME}.${WSIZE}.regions.bed.gz) - | \
                grep "$pattern_match" | \
                awk '{if (NF==8 && $1==$5) {print $4"\t"$8} else if (NF==8 && $1!=$5){print $4}}' | \
                sort | uniq -c | \
                awk '{if (NF==3) {print $2"\t"$3"\t"$1}else {print $2"\tNA\t"$1}}' \
                > ${NAME}.${WSIZE}.contiguous.txt
	fi
#fi


Rscript /mnt/netapp2/posadalab2/uvibetpf/SCCoverageUniformity/scripts/src/MAD.R ${NAME}.${WSIZE}

#rm ${NAME}.${WSIZE}.contiguous.txt 


# ///// Run metaphyler only if the number of unmapped reads is high?
echo "> METAPHYLER"
samtools view -f 0x4 ${WORKDIR}/${SAMPLE} | awk '{OFS="\t"; print ">"$1"\n"$10}' > ${NAME}.unmapped.fasta
~/apps/Metaphyler/MetaPhylerSRV0.115/metaphyler.pl 2 ${NAME}.unmapped.fasta ${NAME}

#
## Get the number of bases which are aligned, soft-clipped or unmapped (only count only primary aligments)
#aligned_soft_bases=$(samtools view -F 256 $WORKDIR/$SAMPLE.dedup.bam | cut -f10 | awk '{total+=length}END{print total}')
## Get the number of bases which are hard-clipped
# /// avoid counting secondary?
#hard_bases=$(samtools view $WORKDIR/$SAMPLE.dedup.bam | cut -f6 | grep H | sed 's/\([0-9]*\)\([A-Z]\)/\1\2\n/g' | grep -v "^$" | grep H | sed 's/H//' | awk '{sum+=$1}END{print sum}')
#if [ -z "$hard_bases" ];then
#	hard_bases=0
#fi
#raw_bases=$(($aligned_soft_bases + $hard_bases))
#genome_length=$(cat ${RESDIR}/${REF}.fai | cut -f2 | awk '{sum+=$1}END{print sum}')
#sequencing_depth=$(bc -l <<< "scale=4; $raw_bases / $genome_length")
#
## 1284: remove not primary alignments, unmapped and duplicates
#
#echo "> CREATE QC FILE"
#rm ${WORKDIR}/${SAMPLE}_QC.txt

# ////// index bam or require to be indexed
samtools index ${NAME}.bam
MT=$(samtools idxstats ${NAME}.bam | grep -e "^MT" -e "^chrM" | awk '{print $3}')
#genome=$(cut -f 5 ${WORKDIR}/${SAMPLE}_genome.bed | head -1)
#breadth=$(head -1 ${WORKDIR}/${SAMPLE}_genome.bed | awk '{print (1-$5)*100}')
#class=$(awk '{if ($1 !~ "{") print $0}' ${WORKDIR}/${SAMPLE}.genus.tab | grep -v "^@" | awk '{if ($5 >= 98) print $1}' | tr -s '\n' ',' | sed 's/,$/\n/')
#
#awk -v sample=${SAMPLE} \
#	-v tbases=${raw_bases} \
#	-v seqdepth=${sequencing_depth} \
#	-v talign=${alignments} \
#	-v unique=${unique} -v \
#	unmapped=${unmapped} \
#	-v dup=${duplicate} \
#	-v mt=${MT} \
#	-v bact=${class} \
#	-v breadth=${breadth} \
#	-v genlen=${genome_length} \
#	-v adapt=${adapter} \
#	-v suppl=${chimeric} \
#	-v chimerapairs=${chimerapairs} \
#	-v preseq_inf=${preseq_inference} \
#	-F $'\t' 'BEGIN{OFS=FS; print sample,treads,tbases/1000000000,seqdepth,unique/treads*100,unmapped/treads*100,adapt,dup/(treads-unmapped)*100,chimeric/treads*100,chimerapairs,mt/(treads-unmapped)*100,bact,breadth,breadth*tbases/genlen,preseq_inf}' > ${WORKDIR}/${SAMPLE}_QC.txt

