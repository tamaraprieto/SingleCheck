#!/bin/bash
#SBATCH -N 1
#SBATCH -n 1
#SBATCH --mail-user tamara.prieto.fernandez@gmail.com
#SBATCH --mail-type FAIL
#SBATCH --cpus-per-task 3
#SBATCH -t 10:00:00
#SBATCH --mem 60G

############################################################################
#                        USAGE                                             #
############################################################################
	usage="
	$(basename "$0") [options] <in.bam|in.fastq.gz> <in2.fastq.gz>
	
	options:
	    -h  show this help text
	    -w <int> set the window size for gini coefficient, coefficient of variation and MAD (default: 10000000)
            -i <int> set increment/Delta for autocorrelation (default: 1000)
            -t <int> number of threads
            -f <int> flag of the reads to filter out
            -q <int>  mapping quality of the reads to analyze
	    -r <ref.fa> reference genome
            -X include chromosome X in the analysis (only for human samples) 
            -N do not perform downsampling. Extract statistics from original file
            -d downsampling sequencing depth. Ignore if -N (default: 0.1)
            -s <ConstantMemory|HighAccuracy|Chained> downsampling strategy method.
                Read Picard DownsampleSam documentation for details:
                https://broadinstitute.github.io/picard/command-line-overview.html#DownsampleSam
                Ignore if -N (default: ConstantMemory)
	    -c <STRING> string containing all the names of the chromosomes you
		want to analyze separated by vertical bars enclosed in single 
		or double quotation marks. Ignore if your organism of study is
		human. Sintax of regular expression allowed
		examples:
			'2|3|4|X'
			'[1-9]'
			'chr[1-9|Z]'
			'NC87126|NC78623'
			'NW_[0-9]*'
            -m <STRING> mitochondrial contig name if different from MT or chrM.
                Quotes are not required in this case
        
	Note: the bam file must be indexed and fastq files must be .gz compressed.
	"

	WSIZE=10000000
	DELTA=1000
	FLAGTOFILTEROUT=772
	THREADS=3
	MAPQUAL=20
	DIPLOID_REGEX="^(chr)*[1-9]"
        MT_REGEX='^(MT|chrM)'
        DOWNSAMPLE="YES"
	downsampling_depth=0.1
	ds_strategy="ConstantMemory" # For downsampling
        DOWNSAMPLING="ImpreciseSeqDepthCalc" # For calculating SeqDepth
        isanum='^[0-9]+$'

        # The : before the flags is for taking control of flags that are not in the list
	while getopts ':hw:i:f:t:q:XNd:s:c:m:r::' option; do
	  case "$option" in
	    h) echo "$usage"
	       exit
	       ;;
	    w) WSIZE=$OPTARG
               if [[ ! $WSIZE =~ $isanum ]] || [[ $WSIZE -eq 0 ]]; then   
                   printf "\nError: -w must be a positive whole number higher than 0\n"
	           echo "$usage" >&2 
                   exit 1
	       fi
	       ;;
            i) DELTA=$OPTARG
               if [[ ! $DELTA =~ $isanum ]] || [[ $DELTA -eq 0 ]]; then
                   printf "\nError: -a must be a positive whole number higher than 0\n"
                   echo "$usage" >&2
                   exit 1
               fi
               ;;
            f) FLAGTOFILTEROUT=$OPTARG
               ;;
            t) THREADS=$OPTARG
               if [[ ! $THREADS =~ $isanum ]]; then
                  printf "\nError: -t must be a positive whole number\n"
                  echo "$usage" >&2
                  exit 1
               fi
               ;;
            q) MAPQUAL=$OPTARG
               if [[ ! $MAPQUAL =~ $isanum ]]; then
               	  printf "\nError: -q must be a positive whole number\n"
                  echo "$usage" >&2
                  exit 1
               fi
               ;;
            N) DOWNSAMPLE="NO"
	       ;;
            d) downsampling_depth=$OPTARG
               re='^[0-9]+([.][0-9]+)?$'
	       if [[ ! $downsampling_depth =~ $re ]] ; then
                   printf "\nError: -d must be a number\n"
                   echo "$usage" >&2
                   exit 1
	       fi
               ;;
            s) ds_strategy=$OPTARG
               strategies='ConstantMemory|HighAccuracy|Chained'
               if [[ ! "$ds_strategy" =~ "$strategies" ]];then
                   printf "\nError: $OPTARG is not a suitable downsampling strategy\n"
                   echo "$usage" >&2
                   exit 1
               fi
	       ;;
            X) DIPLOID_REGEX="^(chr)*[1-9|X]"
               ;;
            c) DIPLOID_REGEX='^('$OPTARG')'
               ;;
	    m) MT_REGEX='^'${OPTARG}
               ;;
            r) REFERENCE=$OPTARG
               ;;
	    :) printf "missing argument for -%s\n" "$OPTARG"
	       echo "$usage" >&2
	       exit 1
	       ;;
	    \?) printf "illegal option: -%s\n" "$OPTARG"
	       echo "$usage" >&2
	       exit 1
	       ;;
	  esac
	done
	shift $((OPTIND - 1))



if [ "$#" -gt 2 ]; then
    printf "\nIncorrect number of arguments\n" >&2
    echo "$usage" >&2
    exit 1
fi

# mandatory arguments
if [ "$#" -eq 1 ]; then
	FILE="$1"
        if [[ "$FILE" != *.bam ]] && [[ "$FILE" != *.fastq.gz ]]; then
            printf "\nFile extension must be \'.bam\' or \'.fastq.gz\'\n" >&2
            echo "$usage" >&2
            exit 1
        fi

	if [ ! -f "$FILE" ]; then
	    echo ""
	    echo "$FILE does not exists"
	    echo ""
	    echo "$usage" >&2
	    exit 1
	fi
	if [[ "$FILE" == *.bam ]];then
	    METHOD="Aligned"
        else
	    METHOD="Single-end"
            FASTQ1=$FILE
            FASTQ2=""
	fi
	
	NAME=$(echo $FILE | sed 's/.bam//' | sed 's/.fastq.gz//' )
	
elif [ "$#" -eq 2 ]; then 
	FASTQ1="$1"
	FASTQ2="$2"
	METHOD="Paired-end"
	if [[ "$FASTQ1" != *_1.fastq.gz ]] || [[ "$FASTQ2" != *_2.fastq.gz ]];then
	    printf "\nPaired-end fastq files must be named as \'_1.fastq.gz\' and \'_2.fastq.gz\'\n" >&2
	    echo "$usage" >&2
	    exit 1
	elif [ ! -f "$FASTQ2" ] || [ ! -f "$FASTQ1" ]; then
	    echo ""
	    echo "One or both fastq file do not exist"
	    echo ""
	    echo "$usage" >&2
	    exit 1
	fi
	NAME=$(echo $FASTQ1 | sed 's/_1.fastq.gz//')
else
        printf "\nYou must provide at least one BAM or FASTQ file as input\n" >&2
        echo "$usage" >&2
	exit 1
fi


############################################################################
#                        SET UP VARIABLES                                  #
############################################################################

if [ -n "$SLURM_JOB_ID" ] && [ "$SLURM_JOB_ID" -eq "$SLURM_JOB_ID" ]
then
    SCRIPT=$(scontrol show job $SLURM_JOBID | awk -F= '/Command=/{print $2}' | awk '{print $1}')
    SCRIPTDIR=$(dirname $SCRIPT)
else
    SCRIPT=$0
    SCRIPTDIR=$(dirname $SCRIPT)	
fi

###//////////// PRINT A MESSAGE WITH ALL THE VARIABLES //////////

############################################################################
#                        LOAD MODULES                                      #
############################################################################
	
	module purge 2> /dev/null
	module load samtools/1.10 2> /dev/null
	module load gcc/6.4.0 R/3.6.3 2> /dev/null
        module load miniconda3/4.8.2 2> /dev/null
        module load gcccore/6.4.0 bedtools/2.28.0 2> /dev/null
        #module load gcccore/6.4.0 bwa-mem2/2.0 2> /dev/null
        module load gcc/6.4.0 bwa/0.7.17 2> /dev/null
	module load picard/2.18.14 2> /dev/null
        source activate /mnt/netapp1/posadalab/APPS/CommonCondaEnvironments/mosdepth 2> /dev/null

# ///////// CONDA ENVIRONMENTS MISSING, CREATE A SINGLE ONE

############################################################################
#                        MAP READS IF INPUT IS A FASTQ FILE                #
############################################################################

if [ "$METHOD" == "Paired-end" ] || [ "$METHOD" == "Single-end" ]; then
        fai_index=$(echo $REFERENCE | sed 's/.fa/.fai/')
        bwa_index=$(echo $REFERENCE | sed 's/.fa/.fa.ann/')
        if [ -z $REFERENCE ] || [ ! -f $REFERENCE ] || [ ! -f $fai_index ] || [ ! -f $bwa_index ];then
             printf "\nCheck that your reference exists and it has been properly indexed!\n" >&2
             exit 1
        fi

	bwa mem \
		-t $THREADS $REFERENCE \
		$FASTQ1 $FASTQ2 | \
		samtools sort -@$THREADS \
		-o ${NAME}.bam -
        samtools index ${NAME}.bam
fi

############################################################################
#                        CALCULATE RAW SEQUENCING COVERAGE                 #
############################################################################


if [ ! -f ${NAME}.bam.bai ]; then
	printf "\nError: your BAM file must be indexed\n" >&2
        exit 1
fi

# Calculate genome length
genome_length=$(samtools view -H  ${NAME}.bam | grep "^@SQ" | awk '{sum+=substr($3,4,length($3)-1)}END{print sum}')
#genome_length=$(cut -f2 ${RESDIR}/${REF}.fai | awk '{sum+=$1}END{print sum}')

# IF READS HAVE BEEN FILTERED OUT IT IS NOT POSSIBLE TO COUNT SUCH BASES
# QUICK RAW SEQUENCING DEPTH CALCULATION: NO POSIBLE TO COUNT CLIPPED BASES. 
if [ "$DOWNSAMPLING" = "ImpreciseSeqDepthCalc" ];then
	# Calculate total sequenced bases
	# Remove supplementary alignments and secondary to avoid counting the same read twice
	# If I do not remove supplementary I will count hard bases twice and the same read twice using samtools idxstats
	samtools view -bF 2304 ${NAME}.bam > ${NAME}.primary.bam
	samtools index ${NAME}.primary.bam
	# idxstats: The output is TAB-delimited with each line consisting of reference sequence name, sequence length, # mapped read-segments and # unmapped read-segments. It is written to stdout. Note this may count reads multiple times if they are mapped more than once or in multiple fragments.
	raw_reads=$(samtools idxstats ${NAME}.primary.bam | \
		awk '{sum+=($3+$4)}END{print sum}')
	# Use the first million of reads to calculate average read length
	mean_readlength=$(samtools view ${NAME}.primary.bam | head -n 1000000 | cut -f 10 | awk '{ print length }'| sort | uniq -c | awk '{sum+=$1*$2;num+=$1}END{print sum/num}')
	
	raw_bases=$(awk -v meanl=$mean_readlength -v rawr=$raw_reads 'BEGIN{print rawr*meanl}')
else
	samtools view -bF 2304 ${NAME}.bam > ${NAME}.primary.bam
	samtools index ${NAME}.primary.bam
	
	# SLOW RAW SEQUENCING DEPTH CALCULATION: POSSIBLE TO COUNT CLIPPED BASES
	# Get the number of bases which are aligned, soft-clipped or unmapped (only count only primary aligments)
	aligned_soft_bases=$(samtools view ${NAME}.primary.bam | \
		cut -f10 | awk '{total+=length}END{print total}')
	## Get the number of bases which are hard-clipped
	hard_bases=$(samtools view ${NAME}.primary.bam | cut -f6 | \
		grep H | sed 's/\([0-9]*\)\([A-Z]\)/\1\2\n/g' | \
		grep -v "^$" | grep H | sed 's/H//' | awk '{sum+=$1}END{print sum}')
	if [ -z "$hard_bases" ];then
	       hard_bases=0
	fi
	raw_bases=$(($aligned_soft_bases + $hard_bases))
fi

sequencing_depth=$(awk -v gl=$genome_length -v rawb=$raw_bases 'BEGIN{print rawb/gl}')
rm ${NAME}.primary.bam.bai
rm ${NAME}.primary.bam

############################################################################
#                 DOWNSAMPLE AND CALCULATE COVERAGE BIAS                   #
############################################################################

# Calculating downsampling probability
# default awk decimal places 6
#probability=$(awk -v ds_d=$downsampling_depth -v rs_d=$sequencing_depth 'BEGIN{print ds_d/rs_d}') 
probability=`bc -l <<< "scale=10; $downsampling_depth / $sequencing_depth"`

if [[ ! -z $(awk -v prob=$probability 'BEGIN{if (prob > 1) print "Lowest sequencing than downsampling selected"}') ]] || [[ "$DOWNSAMPLE" = "NO" ]]
then
	ln -s ${NAME}.bam ${NAME}.${downsampling_depth}X.bam
	samtools index ${NAME}.${downsampling_depth}X.bam
        DEPTH=$sequencing_depth
else
echo "Downsampling following "${ds_strategy}" strategy. From "${sequencing_depth}"X to "${downsampling_depth}"X."
	# Reads from the same template (read-pairs,secondary and supplementary) are all either kept or discarded as a unit, with the goal of retaining reads from PROBABILITY * input templates. The results will contain approximately PROBABILITY * input reads, however for very small PROBABILITIES this may not be the case.
# Take the exponential of the number
	num=$(printf %e ${probability} | fold -w1 | tail -n 1)
	accuracy=$(awk -v num=$num 'BEGIN{print 0.01*10^-num}')
	echo "Downsampling following "${ds_strategy}" strategy. From "${sequencing_depth}"X to "${downsampling_depth}"X. Downsampling probability: "$probability". Accuracy: "${accuracy}
	java -jar $EBROOTPICARD/picard.jar DownsampleSam \
        	INPUT=${NAME}.bam \
        	OUTPUT=${NAME}.${downsampling_depth}X.bam \
        	RANDOM_SEED=1 \
        	PROBABILITY=${probability} \
        	STRATEGY=$ds_strategy \
        	CREATE_INDEX=true \
        	ACCURACY=$accuracy
        DEPTH=$downsampling_depth
fi

echo "> Running mosdepth"
        # the number of floats I need for mosdepth depends on the window size
	# wc -c gives an extra character (\n). window size of 100 (3 chars) -> minimum coverage will be 0.01 (2 decs)
        precision=$(echo $WSIZE | wc -c | awk '{print $1-2}')

        # --fast-mode dont look at internal cigar operations or correct mate overlaps (recommended for most use-cases). Avoids the extra calculations of mate pair overlap and cigar operations
        # 772 flag: exclude read unmapped, not primary alignment, read fails platform/vendor quality checks
        MOSDEPTH_PRECISION=${precision} mosdepth \
                -t $THREADS \
                --fast-mode \
                --by $WSIZE \
                --flag $FLAGTOFILTEROUT \
                --mapq $MAPQUAL \
                ${NAME}.${WSIZE} \
                ${NAME}.${downsampling_depth}X.bam
        # Output .regions.bed.gz contains mean base depth per window
	rm ${NAME}.${WSIZE}.mosdepth* # remove extra files created by mosdepth

conda deactivate

echo "> Creating input for autocorrelation"
        zcat ${NAME}.${WSIZE}.per-base.bed.gz | \
        awk -v alpha=$DELTA -v print_switch=0 \
        '{if (print_switch==1) {start=$2-alpha; if (start<0) {print $1"\t"0"\t"$3-alpha"\t"$4} else{print $1"\t"start"\t"$3-alpha"\t"$4}}
        else if (alpha >= $2 && alpha < $3) {start=$2-alpha;if (start<0) {print $1"\t"0"\t"$3-alpha"\t"$4} else {print $1"\t"start"\t"$3-alpha"\t"$4}; print_switch=1}}' | \
        gzip -c > ${NAME}.${WSIZE}.${DELTA}.bed.gz

        bedtools unionbedg -filler NA  \
        -i ${NAME}.${WSIZE}.per-base.bed.gz \
        ${NAME}.${WSIZE}.${DELTA}.bed.gz | \
        grep -E "$DIPLOID_REGEX" | \
        sort --parallel=$THREADS --version-sort -k4 -k5 | \
        awk  \
        '{if (FNR==1){diff=$3-$2;value1=$4;value2=$5}
        else if (value1!=$4 || value2!=$5){print value1"\t"value2"\t"diff; diff=$3-$2;value1=$4;value2=$5}
        else{diff=diff+($3-$2);value1=$4;value2=$5}
        }END{print value1"\t"value2"\t"diff}' \
        > ${NAME}.${DELTA}.shiftedcov.txt

echo "> Calculating gini and cv"
        # Create a frequency table
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
        grep -E "$DIPLOID_REGEX" | \
        awk '{print $4}' | \
        sort -n | \
        uniq -c | \
        awk '{print $2"\t"$1}' | sort -n -k1,1 \
        > ${NAME}.${WSIZE}.freqs.txt

Rscript ${SCRIPTDIR}/src/GiniIndex.R ${NAME}.${WSIZE} $WSIZE
Rscript ${SCRIPTDIR}/src/CoefficientOfVariation.R ${NAME}.${WSIZE}

echo "> Calculating autocorrelation"

Rscript ${SCRIPTDIR}/src/Autocorrelation.R ${NAME}.${DELTA} $DELTA


echo "> Calculating MAD"

        # Paste values from consecutive windows together
        # I do not want to consider the counts from the last window because is shorter than the other
        # I should not use last comparison neither because it uses last window for one element. I have to only use the first column for calculating the average depth
        zcat ${NAME}.${WSIZE}.regions.bed.gz | \
                tail -n +2 | \
                paste  <(zcat ${NAME}.${WSIZE}.regions.bed.gz) - | \
                grep -E "$DIPLOID_REGEX" | \
                awk '{if (NF==8 && $1==$5) {print $4"\t"$8} else if (NF==8 && $1!=$5){print $4}}' | \
                sort | uniq -c | \
                awk '{if (NF==3) {print $2"\t"$3"\t"$1}else {print $2"\tNA\t"$1}}' \
                > ${NAME}.${WSIZE}.contiguous.txt


Rscript ${SCRIPTDIR}/src/MAD.R ${NAME}.${WSIZE}

# Run Metaphyler on all unmapped reads, not only the downsampled ones
echo "> METAPHYLER"
samtools view -f 0x4 ${NAME}.bam | awk '{OFS="\t"; print ">"$1"\n"$10}' > ${NAME}.unmapped.fasta
~/apps/Metaphyler/MetaPhylerSRV0.115/metaphyler.pl 2 ${NAME}.unmapped.fasta ${NAME}


samtools view -bF 2304 ${NAME}.${downsampling_depth}X.bam > ${NAME}.${downsampling_depth}X.primary.bam
samtools index ${NAME}.${downsampling_depth}X.primary.bam
MT_mappedreads=$(samtools idxstats ${NAME}.${downsampling_depth}X.primary.bam | grep -E "$MT_REGEX" | awk '{print $3}')
mt_perc_totalreads=$(samtools idxstats ${NAME}.${downsampling_depth}X.primary.bam | awk -v mt=$MT_mappedreads '{sum+=($3+$4)}END{print mt/sum*100}')
unmapped_perc_totalreads=$(samtools idxstats ${NAME}.${downsampling_depth}X.primary.bam | \
        awk '{mapped+=$3;unmapped+=$4}END{print unmapped/(unmapped+mapped)*100}')
#breadth=$(awk -v gl=$genome_length '{if ($1==0){sum+=$3}}END{print (1 - sum/gl)*100}' ${NAME}.${DELTA}.shiftedcov.txt)
breadth=$(awk '{if ($1==0){sum+=$3}else if ($1!="NA"){rest+=$3}}END{print 100 - ((sum/(rest+sum))*100)}' ${NAME}.${DELTA}.shiftedcov.txt)
class=$(awk '{if ($1 !~ "{") print $0}' ${NAME}.genus.tab | grep -v "^@" | awk '{print $1"-"$2"-"$3"-"$4"-"$5}' | tr -s '\n' ',' | sed 's/,$/\n/')
SAMPLE=$(basename $NAME)
echo $SAMPLE
WORKDIR=$(dirname "$NAME")
echo $WORKDIR
autocorrelation=$(awk '{print $2}' ${WORKDIR}/Autocorrelation.${SAMPLE}.${DELTA}.txt)
gini=$(awk '{print $2}' ${WORKDIR}/Gini.${SAMPLE}.${WSIZE}.txt)
CV=$(awk '{print $2}' ${WORKDIR}/CV.${SAMPLE}.${WSIZE}.txt)
MAD=$(awk '{print $2}' ${WORKDIR}/MAD.${SAMPLE}.${WSIZE}.txt)

rm ${NAME}.${downsampling_depth}X.ba*
rm ${NAME}.${downsampling_depth}X.primary.bam
rm ${NAME}.${downsampling_depth}X.primary.bam.bai
rm ${NAME}.${DELTA}.shiftedcov.txt
rm ${NAME}.${WSIZE}.${DELTA}.bed.gz
rm ${NAME}.${WSIZE}.contiguous.txt
rm ${NAME}.${WSIZE}.freqs.txt
rm ${NAME}.${WSIZE}.regions.bed.gz
rm ${NAME}.${WSIZE}.regions.bed.gz.csi
rm ${NAME}.${WSIZE}.per-base.bed.gz
rm ${NAME}.${WSIZE}.per-base.bed.gz.csi
rm ${NAME}.unmapped.fasta
rm ${NAME}*.tab
rm ${NAME}.map
rm ${WORKDIR}/CV.${SAMPLE}.${WSIZE}.txt
rm ${WORKDIR}/Gini.${SAMPLE}.${WSIZE}.txt
rm ${WORKDIR}/Autocorrelation.${SAMPLE}.${DELTA}.txt
rm  ${WORKDIR}/MAD.${SAMPLE}.${WSIZE}.txt

printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$SAMPLE" "$raw_bases" "$DEPTH" "$WSIZE" "$DELTA" "$unmapped_perc_totalreads" "$mt_perc_totalreads" "$breadth" "$autocorrelation" "$CV" "$gini" "$MAD" "$class" > ${NAME}.SingleCheck.txt


echo "> Finished!"
